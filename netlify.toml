[build]
  base = ""
  publish = "_site/"

# I test my security headers with https://securityheaders.com/
[[headers]]
  for = "/*"

  [headers.values]
    # https://scotthelme.co.uk/hardening-your-http-response-headers/#content-security-policy
    #
    #   - youtube-nocookie.com is used for YouTube embeds
    #   - analytics.alexwlchan.net is used for my tracking pixel
    #
    content-security-policy = """\
      default-src 'self' 'unsafe-inline' \
      https://youtube-nocookie.com https://www.youtube-nocookie.com; \
      script-src 'self' 'unsafe-inline'; \
      connect-src https://analytics.alexwlchan.net; \
      img-src 'self' 'unsafe-inline' data: \
    """

    # https://scotthelme.co.uk/a-new-security-header-feature-policy/
    # https://scotthelme.co.uk/goodbye-feature-policy-and-hello-permissions-policy/
    permissions-policy = """\
      geolocation=(), \
      midi=(), \
      notifications=(), \
      push=(), \
      sync-xhr=(), \
      microphone=(), \
      camera=(), \
      magnetometer=(), \
      gyroscope=(), \
      vibrate=(),
      payment=() \
    """

    # https://scotthelme.co.uk/a-new-security-header-referrer-policy/
    referrer-policy = "no-referrer-when-downgrade"

    # This header tells browsers to always use HTTPS for the site.
    #
    # See https://scotthelme.co.uk/hardening-your-http-response-headers/#strict-transport-security
    strict-transport-security = "max-age=31536000; includeSubDomains"

    # This headers tells browsers that our content can't be loaded in frames.
    #
    # See https://scotthelme.co.uk/hardening-your-http-response-headers/#x-content-type-options
    x-content-type-options = "nosniff"

    # https://scotthelme.co.uk/hardening-your-http-response-headers/#x-frame-options
    x-frame-options = "ALLOWALL"

    # https://scotthelme.co.uk/hardening-your-http-response-headers/#x-xss-protection
    x-xss-protection = "1; mode=block"

# I can set long-lived caches on all these static assets because I treat
# most files as immutable by filename -- if I modify a file, I'll upload a new
# file with a different name, so it won't be a cache hit.
#
# The one exception is CSS files, but I cache-bust those by passing a query parameter
# that includes the hash of my CSS source.

[[headers]]
  for = "/files/*"

  [headers.values]
		cache-control = "public, max-age=31536000"

[[headers]]
  for = "/images/*"

  [headers.values]
		cache-control = "public, max-age=31536000"

[[headers]]
  for = "/favicons/*"

  [headers.values]
		cache-control = "public, max-age=31536000"

[[headers]]
  for = "/static/*"

  [headers.values]
		cache-control = "public, max-age=31536000"

[[headers]]
  for = "/headers/*"

  [headers.values]
		cache-control = "public, max-age=31536000"

[[headers]]
  for = "/theme/*"

  [headers.values]
		cache-control = "public, max-age=31536000"
